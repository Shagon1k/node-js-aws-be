service:
  name: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: ${self:custom.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::rs-school-app-shagon1k-uploaded"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::rs-school-app-shagon1k-uploaded/*"
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]
  environment:
    SQS_URL:
      Ref: SQSQueue

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    GatewayResponseDefault400:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseAccessDenied:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: ACCESS_DENIED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: UNAUTHORIZED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseTemplates:
          application/json: '{ "message": $context.error.messageString }'
    GatewayResponseDefault500:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "message": $context.error.messageString }'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
    SQSQueue:
      Value:
        Ref: SQSQueue

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: "./config/webpack/webpack.config.js"   # Name of webpack configuration file
    packager: "npm"   # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
    keepOutputDirectory: true
  stage: ${opt:stage,dev}

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: get
          path: import
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            arn: "${cf:authorization-service-${self:custom.stage}.BasicAuthorizerLambdaFunctionQualifiedArn}"
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: rs-school-app-shagon1k-uploaded
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true